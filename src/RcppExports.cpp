// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DEMaP
Rcpp::NumericVector DEMaP(std::vector<int> gfrom, std::vector<int> gto, std::vector<double> gw, int NbNodes, std::vector<int> dep, std::vector<int> arr, NumericMatrix embedding);
RcppExport SEXP _snnMAP_DEMaP(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP embeddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type embedding(embeddingSEXP);
    rcpp_result_gen = Rcpp::wrap(DEMaP(gfrom, gto, gw, NbNodes, dep, arr, embedding));
    return rcpp_result_gen;
END_RCPP
}
// DEMaP_par
Rcpp::NumericVector DEMaP_par(Rcpp::IntegerVector gfrom, Rcpp::IntegerVector gto, Rcpp::NumericVector gw, int NbNodes, Rcpp::IntegerVector dep, Rcpp::IntegerVector arr, Rcpp::NumericMatrix embedding);
RcppExport SEXP _snnMAP_DEMaP_par(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP embeddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dep(depSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type embedding(embeddingSEXP);
    rcpp_result_gen = Rcpp::wrap(DEMaP_par(gfrom, gto, gw, NbNodes, dep, arr, embedding));
    return rcpp_result_gen;
END_RCPP
}
// optimize_layout_r
NumericMatrix optimize_layout_r(NumericMatrix head_embedding, Nullable<NumericMatrix> tail_embedding, const std::vector<unsigned int> positive_head, const std::vector<unsigned int> positive_tail, const std::vector<unsigned int> positive_ptr, unsigned int n_epochs, unsigned int n_head_vertices, unsigned int n_tail_vertices, const std::vector<float> epochs_per_sample, const std::string& method, List method_args, float initial_alpha, List opt_args, Nullable<Function> epoch_callback, float negative_sample_rate, bool pcg_rand, bool batch, std::size_t n_threads, std::size_t grain_size, bool move_other, bool verbose);
RcppExport SEXP _snnMAP_optimize_layout_r(SEXP head_embeddingSEXP, SEXP tail_embeddingSEXP, SEXP positive_headSEXP, SEXP positive_tailSEXP, SEXP positive_ptrSEXP, SEXP n_epochsSEXP, SEXP n_head_verticesSEXP, SEXP n_tail_verticesSEXP, SEXP epochs_per_sampleSEXP, SEXP methodSEXP, SEXP method_argsSEXP, SEXP initial_alphaSEXP, SEXP opt_argsSEXP, SEXP epoch_callbackSEXP, SEXP negative_sample_rateSEXP, SEXP pcg_randSEXP, SEXP batchSEXP, SEXP n_threadsSEXP, SEXP grain_sizeSEXP, SEXP move_otherSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type head_embedding(head_embeddingSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type tail_embedding(tail_embeddingSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type positive_head(positive_headSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type positive_tail(positive_tailSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type positive_ptr(positive_ptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_head_vertices(n_head_verticesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_tail_vertices(n_tail_verticesSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type epochs_per_sample(epochs_per_sampleSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< List >::type method_args(method_argsSEXP);
    Rcpp::traits::input_parameter< float >::type initial_alpha(initial_alphaSEXP);
    Rcpp::traits::input_parameter< List >::type opt_args(opt_argsSEXP);
    Rcpp::traits::input_parameter< Nullable<Function> >::type epoch_callback(epoch_callbackSEXP);
    Rcpp::traits::input_parameter< float >::type negative_sample_rate(negative_sample_rateSEXP);
    Rcpp::traits::input_parameter< bool >::type pcg_rand(pcg_randSEXP);
    Rcpp::traits::input_parameter< bool >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type grain_size(grain_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type move_other(move_otherSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_layout_r(head_embedding, tail_embedding, positive_head, positive_tail, positive_ptr, n_epochs, n_head_vertices, n_tail_vertices, epochs_per_sample, method, method_args, initial_alpha, opt_args, epoch_callback, negative_sample_rate, pcg_rand, batch, n_threads, grain_size, move_other, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_distance
NumericVector rcpp_distance(NumericMatrix mat, NumericVector X, NumericVector Y);
RcppExport SEXP _snnMAP_rcpp_distance(SEXP matSEXP, SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_distance(mat, X, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_snnMAP_DEMaP", (DL_FUNC) &_snnMAP_DEMaP, 7},
    {"_snnMAP_DEMaP_par", (DL_FUNC) &_snnMAP_DEMaP_par, 7},
    {"_snnMAP_optimize_layout_r", (DL_FUNC) &_snnMAP_optimize_layout_r, 21},
    {"_snnMAP_rcpp_distance", (DL_FUNC) &_snnMAP_rcpp_distance, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_snnMAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
